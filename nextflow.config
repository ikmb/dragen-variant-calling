params {

	dragen_tmp = "/staging/tmp"
	assembly = "hg38"
	vep_assembly = "GRCh38"
	kit = false
	ml = null

	trio = false
	run_name = false
	outdir = "results"
	joint_calling = false
	exome = false
	bed = false

	multiqc = false
	cnv = false
	sv = false

	summary = false
	min_mapq = 10

	kill = false
	panel = false
        all_panels = false
        panel_intervals = false
        panel_coverage = 10

	expansion_hunter = true

	interval_padding = 10

	vep = false
        dbnsfp_db = false
	dbnsfp_fields = "DANN_score,M-CAP_pred,REVEL_score"
        dbscsnv_db = false
        cadd_snps = false
        cadd_indels = false

        vep_cache_dir = false
        vep_plugin_dir = false

	logo = "${baseDir}/assets/ikmblogo.png"
}

manifest {
        version = "1.0"
        description = "Dragen Variant Calling Pipeline"
        author = "Marc P. Hoeppner"
        homePage = "https://github.com/ikmb/dragen-variant-calling"
        nextflowVersion = "20.10.0"
}

timeline {
        enabled = true
        file = "${params.outdir}/pipeline_info/dragen-variant-calling_timeline.html"
}
report {
        enabled = true
        file = "${params.outdir}/pipeline_info/dragen-variant-calling_report.html"
}
trace {
        enabled = true
        file = "${params.outdir}/pipeline_info/dragen-variant-calling_trace.txt"
}
dag {
        enabled = true
        file = "${params.outdir}/pipeline_info/dragen-variant-calling_dag.svg"
}

profiles {
	standard {
                includeConfig 'conf/diagnostic.config'
                includeConfig 'conf/resources.config'
		includeConfig 'conf/base.config'
        }
	test_trio {
		includeConfig 'conf/test_trio.config'
	}
}

params.max_cpus = 24
params.max_ram = 250

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

