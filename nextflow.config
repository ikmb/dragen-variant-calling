params {
	dragen_tmp = "/staging/tmp"
	genome = "hg38"
	ped = false
	run_name = false
	outdir = "results"
	joint_calling = false
	mode = false
	bed = false
	qc = false
	multiqc = false
	cnv = false
	sv = false
	summary = false
	min_mapq = 10
	vep = false
}

manifest {
        version = "1.0"
        description = "Dragen Variant Calling Pipeline"
        author = "Marc P. Hoeppner"
        homePage = "https://github.com/ikmb/dragen-variant-calling"
        nextflowVersion = "20.01.0"
}

timeline {
        enabled = true
        file = "${params.outdir}/pipeline_info/dragen-variant-calling_timeline.html"
}
report {
        enabled = true
        file = "${params.outdir}/pipeline_info/dragen-variant-calling_report.html"
}
trace {
        enabled = true
        file = "${params.outdir}/pipeline_info/dragen-variant-calling_trace.txt"
}
dag {
        enabled = true
        file = "${params.outdir}/pipeline_info/dragen-variant-calling_dag.svg"
}

profiles {
	standard {
                includeConfig 'conf/diagnostic.config'
                includeConfig 'conf/resources.config'
		includeConfig 'conf/base.config'
        }
}

params.max_cpus = 24
params.max_ram = 250

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

